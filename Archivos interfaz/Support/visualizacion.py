#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Nov 11, 2024 04:34:41 PM EST  platform: Windows NT

import json
import sys
import os
import threading
import tkinter as tk
import tkinter.ttk as ttk
import networkx as nx
from tkinter.constants import *

# Determina la ruta al directorio raíz del proyecto
current_dir = os.path.dirname(__file__)
project_root = os.path.abspath(os.path.join(current_dir, '..', '..'))

# Agrega el directorio raíz a sys.path
sys.path.append(project_root)

# Importar los adaptadores
from models.GRAFOS import Grafo
from adapters.visualizar_genero_adapter import VisualizarGeneroAdapter
from adapters.visualizar_anio_adapter import VisualizarAnioAdapter
from adapters.visualizar_titulo_adapter import VisualizarTituloAdapter
from adapters.visualizar_grafo import visualizar_grafo



import visualizacion_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: 
        return        
    try: 
        visualizacion_support.root.tk.call('source', os.path.join(_location, 'themes', 'default.tcl'))
    except: 
        pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font="TkDefaultFont")
    if sys.platform == "win32":
        style.theme_use('winnative')    
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        """Configura y muestra la ventana principal."""

        # Centrar la ventana en la pantalla
        top.geometry("900x600")
        top.resizable(True, True)
        top.title("Visualización de Datos")
        top.configure(background="#98e4fe")
        top.state('zoomed')  # Activa el modo maximizado
        top.update_idletasks()  # Asegura que las dimensiones se ajusten antes de renderizar

        self.top = top
        self.combobox = tk.StringVar()
        
        self.DecorativeFrame = tk.Frame(
            self.top, 
            bg="#4a154b",  # Color del marco decorativo
            relief="ridge", 
            borderwidth=5 
        )
        self.DecorativeFrame.place(relx=0.24, rely=0.09, relwidth=0.72, relheight=0.82)

        # Canvas principal para la visualización
        self.Canvas1 = tk.Canvas(self.top, bg="#ffefa5", relief="ridge", borderwidth=2)
        self.Canvas1.place(relx=0.25, rely=0.1, relwidth=0.7, relheight=0.8)

        # Frame de controles (lateral izquierdo)
        self.Frame1 = tk.Frame(self.top, bg="#9b0a64", relief="groove", borderwidth=2, padx=10, pady=10)
        self.Frame1.place(relx=0.03, rely=0.1, relwidth=0.2, relheight=0.8)

        # Label de título principal
        self.Label1 = tk.Label(
            self.Frame1,
            text="Visualización",
            bg="#9b0a64",
            fg="white",
            font=("Segoe UI", 14, "bold"),
            anchor="center"
        )
        self.Label1.pack(pady=10)

        # Combobox para seleccionar la opción de visualización
        self.TCombobox1 = ttk.Combobox(
            self.Frame1,
            textvariable=self.combobox,
            state="readonly",
            font=("Segoe UI", 10)
        )
        self.TCombobox1["values"] = ["Título", "Género", "Año de Publicación"]
        self.TCombobox1.set("Título")
        self.TCombobox1.pack(fill=tk.X, pady=10)

        # Botón para ver el árbol
        self.Button1 = tk.Button(
            self.Frame1,
            text="Ver Árbol",
            bg="#fec210",
            fg="black",
            font=("Segoe UI", 12),
            command=self.on_button_click
        )
        self.Button1.pack(fill=tk.X, pady=10)

        # Botón para ver el grafo
        self.btnGrafo = tk.Button(
            self.Frame1,
            text="Ver Grafo",
            bg="#fec210",
            fg="black",
            font=("Segoe UI", 12),
            command=self.doGrafo
        )
        self.btnGrafo.pack(fill=tk.X, pady=10)
        
                # Botón para regresar
        self.Button2 = tk.Button(
            self.Frame1,
            text="Regresar",
            bg="#f97db1",
            fg="black",
            font=("Segoe UI", 12),
            command=self.regresar
        )
        self.Button2.pack(fill=tk.X, pady=10)

        # Vincular eventos de zoom y movimiento
        self.Canvas1.bind("<MouseWheel>", self.zoom)  # Zoom con la rueda del ratón
        self.Canvas1.bind("<ButtonPress-1>", self.start_move)  # Inicia el movimiento
        self.Canvas1.bind("<B1-Motion>", self.on_move)  # Arrastra el Canvas

    def on_button_click(self):
        """Determina el tipo de árbol a visualizar y delega al adaptador correspondiente."""
        selected_option = self.combobox.get()
        self.Canvas1.delete("all")

        if selected_option == "Género":
            adapter = VisualizarGeneroAdapter(self.Canvas1)
            genre_tree = adapter.construir_arbol_por_genero()
            adapter.dibujar_arbol(genre_tree.root, 300, 20, 150)
        if selected_option == "Año de Publicación":
            adapter = VisualizarAnioAdapter(self.Canvas1)
            anio_tree = adapter.construir_arbol_por_anio()
            adapter.dibujar_arbol(anio_tree.root, 300, 20, 150, 100)
        if selected_option == "Título":
            adapter = VisualizarTituloAdapter(self.Canvas1) 
            title_tree = adapter.construir_arbol_por_titulo()
            adapter.dibujar_arbol(title_tree.root)
            

    def zoom(self, event):
        """Maneja el zoom en el Canvas con la rueda del ratón."""
        # Obtener las coordenadas internas del Canvas
        canvas_x = self.Canvas1.canvasx(event.x)
        canvas_y = self.Canvas1.canvasy(event.y)

        # Determinar el factor de escala
        scale = 1.1 if event.delta > 0 else 0.9

        # Escalar el contenido del Canvas
        self.Canvas1.scale("all", canvas_x, canvas_y, scale, scale)

        # Configurar la región de scroll del Canvas
        self.configure_scrollregion()


    def configure_scrollregion(self):
        """Configura la región de desplazamiento del Canvas."""
        self.Canvas1.configure(scrollregion=self.Canvas1.bbox("all"))
    def start_move(self, event):
        """Inicia el movimiento del Canvas con el mouse."""
        self.Canvas1.scan_mark(event.x, event.y)

    def on_move(self, event):
        """Mueve el Canvas al arrastrar el mouse."""
        self.Canvas1.scan_dragto(event.x, event.y, gain=1)
        
    def doGrafo(self):
    # Ruta del archivo del grafo
        ruta_grafo = os.path.join(project_root, 'arboles_persistencia', 'grafo_libros.json')

    # Función para cargar el grafo desde un archivo JSON
        def load_graph_from_json(filename):
            with open(filename, 'r', encoding='utf-8') as file:
                data = json.load(file)
                graph = nx.node_link_graph(data)
                return graph

    # Verificar si el archivo del grafo existe
        if not os.path.exists(ruta_grafo):
            print(f"El archivo {ruta_grafo} no existe. Por favor, genera el grafo primero.")
            return

    # Cargar el grafo desde el archivo JSO  N
        graph = load_graph_from_json(ruta_grafo)

    # Llamar a la función de visualización en un hilo separado
        threading.Thread(target=visualizar_grafo, args=(graph,)).start()

    def regresar(self):
        self.top.destroy()
        import navegacion
        navegacion.start_up()

def start_up():
    visualizacion_support.main()

if __name__ == '__main__':
    visualizacion_support.main()
